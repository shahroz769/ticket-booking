// File: next.config.mjs
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

// File: package.json
{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.456.0",
    "mongoose": "^8.8.1",
    "next": "14.2.17",
    "next-themes": "^0.4.3",
    "nodemailer": "^6.9.16",
    "react": "^18",
    "react-dom": "^18",
    "sonner": "^1.7.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "postcss": "^8",
    "tailwindcss": "^3.4.1"
  }
}

// File: .env
NEXT_PUBLIC_APP_URL=https://www.bookkrlo.com
MONGODB_URI=mongodb+srv://bookkrloinfo:bookkrloinfo@cluster0.bovem.mongodb.net/?retryWrites=true&w=majority&appName=bookkrlo
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
EMAIL_ADDRESS=bookkrlo.info@gmail.com
APP_PASSWORD=coewzyidghjixwwx
// File: tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
    darkMode: ["class"],
    content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'var(--background)',
  			foreground: 'var(--foreground)'
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};

// File: app/api/payment/easypaisa/route.js
export async function POST(request) {
    try {
        const body = await request.json();

        // Format the request payload to match the API requirements
        const payload = {
            orderId: body.orderId || `D${Date.now()}`, // Generate orderId if not provided
            amount: body.amount.toString(),
            phone: body.phone,
            email: body.email,
            type: 'wallet',
        };

        const response = await fetch(
            'https://api.sahulatpay.com/payment/initiate-ep/b93fb70c-6ac3-4c2d-b92f-a6869b6306bc',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            }
        );

        const data = await response.json();

        // Match the exact response format from the API
        if (data.success) {
            return Response.json({
                success: true,
                message: 'Operation successful',
                data: {
                    txnNo: data.data.txnNo,
                    txnDateTime: data.data.txnDateTime,
                },
                statusCode: 200,
            });
        } else {
            return Response.json({
                success: false,
                message: data.message || 'Operation failed',
                statusCode: data.statusCode || 400,
            });
        }
    } catch (error) {
        console.error('Error processing EasyPaisa payment:', error);
        return Response.json({
            success: false,
            message: 'Internal server error',
            statusCode: 500,
        });
    }
}

// File: app/api/payment/jazzcash/route.js
export async function POST(request) {
    try {
        const body = await request.json();
        console.log('Received JazzCash payment request:', body);

        console.log('Sending request to JazzCash API');
        const response = await fetch(
            'https://api.sahulatpay.com/payment/initiate-jz/b93fb70c-6ac3-4c2d-b92f-a6869b6306bc',
            {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    amount: body.amount,
                    type: body.type,
                    phone: body.phone,
                    redirect_url: `${process.env.NEXT_PUBLIC_APP_URL}`,
                }),
            }
        );

        const data = await response.json();
        console.log('Received response from JazzCash API:', data);

        if (data.success) {
            console.log('JazzCash payment initiated successfully');
            return Response.json({
                success: true,
                message: 'Payment initiated successfully',
            });
        } else {
            console.error('JazzCash payment initiation failed:', data.message);
            return Response.json({
                success: false,
                message: data.message || 'Failed to initiate payment',
            });
        }
    } catch (error) {
        console.error('Error in JazzCash payment processing:', error);
        return Response.json(
            {
                success: false,
                message: 'Internal server error',
            },
            { status: 500 }
        );
    }
}

// File: app/api/save-transaction/route.js
import { NextResponse } from 'next/server';
import connectDB from '@/config/databse';
import User from '@/models/User';
import nodemailer from 'nodemailer';

// Create a nodemailer transporter
const transporter = nodemailer.createTransport({
    host: process.env.MAIL_HOST,
    port: process.env.MAIL_PORT || 587,
    secure: process.env.MAIL_PORT == 465,
    auth: {
        user: process.env.EMAIL_ADDRESS,
        pass: process.env.APP_PASSWORD,
    },
});

export async function POST(request) {
    await connectDB();

    try {
        const {
            name,
            email,
            phone,
            paymentMethod,
            ticketCount,
            amountPaid,
            transactionId,
        } = await request.json();

        // Create or update user
        const user = await User.findOneAndUpdate(
            { email },
            { fullName: name, phoneNumber: phone },
            { upsert: true, new: true }
        );

        // Create transaction record
        const transaction = {
            userId: user._id,
            paymentMethod,
            ticketCount,
            amountPaid,
            transactionId,
        };

        user.transactions = user.transactions || [];
        user.transactions.push(transaction);
        await user.save();

        // Send confirmation email
        const mailOptions = {
            from: {
                name: 'TicketWala',
                address: process.env.EMAIL_ADDRESS,
            },
            to: email,
            subject: 'Your TicketWala Purchase Confirmation',
            text: `Dear ${name},

Thank you for your purchase on TicketWala!

Transaction Details:
- Transaction ID: ${transactionId}
- Amount Paid: Rs ${amountPaid}
- Number of Tickets: ${ticketCount}
- Payment Method: ${paymentMethod}

Your tickets will be sent to you shortly in a separate email.

If you have any questions, please don't hesitate to contact us.

Best regards,
The TicketWala Team`,
        };

        await transporter.sendMail(mailOptions);

        return NextResponse.json({
            success: true,
            message:
                'Transaction saved successfully and confirmation email sent',
        });
    } catch (error) {
        console.error('Error saving transaction or sending email:', error);
        return NextResponse.json(
            { success: false, message: 'Error processing your request' },
            { status: 500 }
        );
    }
}

// File: app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --radius: 0.5rem}
}
// File: app/layout.js
import './globals.css';
import { Toaster } from 'sonner';

export const metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
};

export default function RootLayout({ children }) {
    return (
        <html lang='en'>
            <body>
                {children}
                <Toaster />
            </body>
        </html>
    );
}

// File: app/page.js
'use client';

import { useState } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import {
    Minus,
    Plus,
    MapPin,
    Calendar,
    Clock,
    ChevronRight,
    Facebook,
    Instagram,
    Linkedin,
    Twitter,
    X,
    CheckCircle,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Toaster, toast } from 'sonner';
import banner from '@/assets/images/banner.jpeg';
import ahmedRauf from '@/assets/images/speakers/ahmedRauf.png';
import kiranNayab from '@/assets/images/speakers/kiranNayab.png';
import maryamRao from '@/assets/images/speakers/maryamRao.png';
import mushPanjwani from '@/assets/images/speakers/mushPanjwani.png';
import saadAfridi from '@/assets/images/speakers/saadAfridi.png';
import saadLakhi from '@/assets/images/speakers/saadLakhi.png';
import usamaGhori from '@/assets/images/speakers/usamaGhori.png';
import usmanSaleem from '@/assets/images/speakers/usmanSaleem.png';
import wajihUdDin from '@/assets/images/speakers/wajihUdDin.png';

export default function Page() {
    const [ticketCount, setTicketCount] = useState(1);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [isProcessing, setIsProcessing] = useState(false);
    const [paymentMethod, setPaymentMethod] = useState('jazzcash');
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        phone: '',
    });
    const [paymentSuccess, setPaymentSuccess] = useState(false);
    const [transactionDetails, setTransactionDetails] = useState(null);
    const [paymentError, setPaymentError] = useState(null); // Added paymentError state
    const ticketPrice = 850;

    const speakers = [
        {
            name: 'Ahmed Rauf',
            title: 'Founder',
            handle: '@telemartofficalpage',
            image: ahmedRauf,
        },
        {
            name: 'Saad Afridi',
            title: 'CEO',
            handle: '@scentsnstories',
            image: saadAfridi,
        },
        {
            name: 'Saad Lakhi',
            title: 'Founder',
            handle: '@SRL Commercify',
            image: saadLakhi,
        },
        {
            name: 'Mush Panjwani',
            title: 'Founder',
            handle: '@Coffee Wagera',
            image: mushPanjwani,
        },
        {
            name: 'Usman Saleem',
            title: 'CEO',
            handle: '@Khazanay',
            image: usmanSaleem,
        },
        {
            name: 'Maryam Rao',
            title: 'Consultant Trainer',
            handle: '@SBCG',
            image: maryamRao,
        },
        {
            name: 'Kiran Nayab',
            title: 'Event Host',
            handle: '',
            image: kiranNayab,
        },
        {
            name: 'Wajih Uddin',
            title: 'Speaker',
            handle: '@Youth Club',
            image: wajihUdDin,
        },
        {
            name: 'Usama Ghori',
            title: 'Comedian',
            handle: '',
            image: usamaGhori,
        },
    ];

    const handleInputChange = (e) => {
        setFormData({
            ...formData,
            [e.target.id]: e.target.value,
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setIsProcessing(true);
        setPaymentError(null);

        try {
            const response = await fetch(`/api/payment/${paymentMethod}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    amount: ticketPrice * ticketCount,
                    phone: formData.phone,
                    email: formData.email,
                    orderId: Date.now().toString(),
                    type: 'wallet',
                }),
            });

            const data = await response.json();

            if (data.success) {
                setPaymentSuccess(true);
                setTransactionDetails(data.data);

                // Save transaction data to MongoDB
                const saveResponse = await fetch('/api/save-transaction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        name: formData.name,
                        email: formData.email,
                        phone: formData.phone,
                        paymentMethod,
                        ticketCount,
                        amountPaid: ticketPrice * ticketCount,
                        transactionId: data.data.txnNo,
                    }),
                });

                const saveData = await saveResponse.json();

                if (saveData.success) {
                    toast.success('Payment Successful!', {
                        description:
                            'Your payment has been processed and saved successfully.',
                        duration: 5000,
                    });
                } else {
                    console.error(
                        'Failed to save transaction data:',
                        saveData.message
                    );
                    toast.error('Payment Processed', {
                        description:
                            'Payment successful, but there was an issue saving your data. Please contact support.',
                        duration: 5000,
                    });
                }
            } else {
                setPaymentError(
                    data.message || 'Something went wrong. Please try again.'
                );
                toast.error('Payment Failed', {
                    description:
                        data.message ||
                        'Something went wrong. Please try again.',
                });
                setPaymentSuccess(false);
            }
        } catch (error) {
            console.error('Error processing payment:', error);
            setPaymentError('Failed to process payment. Please try again.');
            toast.error('Error', {
                description: 'Failed to process payment. Please try again.',
            });
            setPaymentSuccess(false);
        }

        setIsProcessing(false);
    };

    const resetForm = () => {
        setFormData({
            name: '',
            email: '',
            phone: '',
        });
        setPaymentSuccess(false);
        setPaymentError(null); // Clear paymentError
        setTransactionDetails(null);
        setIsModalOpen(false);
    };

    return (
        <div className='min-h-screen bg-black text-white flex flex-col'>
            {/* Navbar */}
            <nav className='border-b border-gray-800'>
                <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>
                    <div className='flex justify-between items-center h-16'>
                        <div className='flex items-center'>
                            <Link
                                href='/'
                                className='text-2xl font-bold text-emerald-400'
                            >
                                TicketWala
                            </Link>
                            <div className='hidden md:block ml-10'>
                                <div className='flex items-center space-x-4'>
                                    <Link
                                        href='/events'
                                        className='text-gray-300 hover:text-white px-3 py-2'
                                    >
                                        Events
                                    </Link>
                                    <Link
                                        href='/about'
                                        className='text-gray-300 hover:text-white px-3 py-2'
                                    >
                                        About
                                    </Link>
                                    <Link
                                        href='/contact'
                                        className='text-gray-300 hover:text-white px-3 py-2'
                                    >
                                        Contact
                                    </Link>
                                </div>
                            </div>
                        </div>
                        <Button className='bg-emerald-500 hover:bg-emerald-600'>
                            List Your Event
                        </Button>
                    </div>
                </div>
            </nav>

            {/* Event Banner */}
            <div className='relative h-[400px] w-full'>
                <div className='absolute inset-0 bg-gradient-to-r from-black to-transparent z-10' />
                <Image
                    src={banner}
                    alt='Event banner'
                    className='w-full h-full object-cover'
                />
            </div>

            {/* Main Content */}
            <div className='flex-grow'>
                <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-16'>
                    {/* Event Title and Details */}
                    <div>
                        <h1 className='text-4xl font-bold mb-2 text-emerald-400'>
                            InspireCon'24
                        </h1>
                        <h2 className='text-xl mb-4'>
                            Inspiring Journeys from Vision to Reality.
                        </h2>
                        <div className='flex items-center space-x-4 text-gray-200'>
                            <div className='flex items-center'>
                                <Calendar className='w-5 h-5 mr-2' />
                                <span>26 Nov 2024</span>
                            </div>
                            <div className='flex items-center'>
                                <Clock className='w-5 h-5 mr-2' />
                                <span>08:30 pm</span>
                            </div>
                            <div className='flex items-center'>
                                <MapPin className='w-5 h-5 mr-2' />
                                <span>
                                    Main Auditorium, UIT University, Karachi
                                </span>
                            </div>
                        </div>
                    </div>

                    {/* Ticket Booking */}
                    <Card className='bg-gray-800 border-gray-700'>
                        <CardContent className='p-6'>
                            <div className='space-y-6'>
                                <div className='flex items-center justify-between'>
                                    <div>
                                        <h3 className='text-lg font-semibold text-gray-200'>
                                            Standard Ticket
                                        </h3>
                                        <p className='text-gray-300'>
                                            Rs {ticketPrice}
                                        </p>
                                    </div>
                                    <div className='flex items-center space-x-4'>
                                        <Button
                                            variant='outline'
                                            size='icon'
                                            onClick={() =>
                                                setTicketCount(
                                                    Math.max(1, ticketCount - 1)
                                                )
                                            }
                                            className='border-gray-700'
                                        >
                                            <Minus className='h-4 w-4' />
                                        </Button>
                                        <span className='w-8 text-center text-gray-200'>
                                            {ticketCount}
                                        </span>
                                        <Button
                                            variant='outline'
                                            size='icon'
                                            onClick={() =>
                                                setTicketCount(ticketCount + 1)
                                            }
                                            className='border-gray-700'
                                        >
                                            <Plus className='h-4 w-4' />
                                        </Button>
                                    </div>
                                </div>

                                <div className='border-t border-gray-700 pt-4'>
                                    <div className='flex justify-between text-lg font-semibold text-gray-200'>
                                        <span>Total Amount</span>
                                        <span>
                                            Rs {ticketCount * ticketPrice}
                                        </span>
                                    </div>
                                </div>

                                <Button
                                    className='w-full bg-emerald-500 hover:bg-emerald-600'
                                    onClick={() => setIsModalOpen(true)}
                                >
                                    Proceed to Checkout
                                    <ChevronRight className='ml-2 h-4 w-4' />
                                </Button>
                            </div>
                        </CardContent>
                    </Card>

                    {/* Event Details */}
                    <Card className='bg-gray-800 border-gray-700'>
                        <CardContent className='p-6 space-y-4'>
                            <h3 className='text-3xl font-bold mb-2 text-emerald-400'>
                                About the Event
                            </h3>
                            <p className='text-gray-200'>
                                This event aims to foster a culture of
                                entrepreneurial thinking, motivate aspiring
                                entrepreneurs, and explore key norms that drive
                                success in today's dynamic economy. Through
                                InspireCon, we are committed to guiding the next
                                generation of changemakers, offering valuable
                                industry insights, and sharing the personal
                                stories of successful industry icons about how
                                they began their journeys and achieved their
                                goals. organized by the UIT University
                                Freelancers Club (UFC), is scheduled for
                                November 26th, 2024.
                            </p>
                            <div className='space-y-2'>
                                <p className='text-gray-200'>
                                    <strong>Date:</strong> 26 Nov 2024
                                </p>
                                <p className='text-gray-200'>
                                    <strong>Gates Open:</strong> 8:00 PM
                                </p>
                                <p className='text-gray-200'>
                                    <strong>Event Time:</strong> 8:30 - 11:30 PM
                                </p>
                                <p className='text-gray-200'>
                                    <strong>Venue:</strong> Main Auditorium, UIT
                                    University, Karachi
                                </p>
                            </div>
                        </CardContent>
                    </Card>

                    {/* Speakers Section */}
                    <div>
                        <h2 className='text-3xl font-bold mb-8'>
                            <span className='text-emerald-400'>Speakers</span>
                        </h2>
                        <div className='grid grid-cols-1 md:grid-cols-3 gap-8'>
                            {speakers.map((speaker, index) => (
                                <Card
                                    key={index}
                                    className='bg-gray-800 border-gray-700'
                                >
                                    <CardContent className='p-4'>
                                        <div className='aspect-square relative mb-4 rounded-xl overflow-hidden'>
                                            <Image
                                                src={speaker.image}
                                                alt={speaker.name}
                                                fill
                                                className='object-cover'
                                            />
                                        </div>
                                        <h3 className='text-xl font-bold text-gray-200'>
                                            {speaker.name}
                                        </h3>
                                        <p className='text-emerald-400'>
                                            {speaker.title}
                                        </p>
                                        {speaker.handle && (
                                            <p className='text-gray-400'>
                                                {speaker.handle}
                                            </p>
                                        )}
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                    </div>

                    {/* Location */}
                    <Card className='bg-gray-800 border-gray-700'>
                        <CardContent className='p-6 space-y-4'>
                            <h3 className='text-3xl font-bold mb-2 text-emerald-400'>
                                Event Location
                            </h3>
                            <p className='text-gray-200'>
                                ST-13 Abul Hasan Isphahani Rd, Block 7
                                Gulshan-e-Iqbal, Karachi
                            </p>
                            <div className='h-[400px] w-full bg-gray-800 rounded-lg'>
                                <iframe
                                    src='https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d14472.50780329386!2d67.1088845!3d24.9277448!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3eb338c700571b09%3A0xd86779b29e77f36a!2sUIT%20University!5e0!3m2!1sen!2s!4v1731139443563!5m2!1sen!2s'
                                    width='100%'
                                    height='100%'
                                    style={{ border: 0 }}
                                    allowFullScreen=''
                                    loading='lazy'
                                    referrerPolicy='no-referrer-when-downgrade'
                                    className='rounded-lg'
                                ></iframe>
                            </div>
                        </CardContent>
                    </Card>
                </div>
            </div>

            {/* Footer */}
            <footer className='bg-gray-800 border-t border-gray-700'>
                <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8'>
                    <div className='grid grid-cols-1 md:grid-cols-4 gap-8'>
                        <div>
                            <h3 className='text-lg font-semibold mb-4'>
                                Socials
                            </h3>
                            <div className='flex space-x-4'>
                                <Facebook className='w-6 h-6 text-gray-300 hover:text-white cursor-pointer' />
                                <Instagram className='w-6 h-6 text-gray-300 hover:text-white cursor-pointer' />
                                <Linkedin className='w-6 h-6 text-gray-300 hover:text-white cursor-pointer' />
                                <Twitter className='w-6 h-6 text-gray-300 hover:text-white cursor-pointer' />
                            </div>
                        </div>
                        <div>
                            <h3 className='text-lg font-semibold mb-4'>
                                Resources
                            </h3>
                            <ul className='space-y-2'>
                                <li>
                                    <Link
                                        href='#'
                                        className='text-gray-300 hover:text-white'
                                    >
                                        About Us
                                    </Link>
                                </li>
                                <li>
                                    <Link
                                        href='#'
                                        className='text-gray-300 hover:text-white'
                                    >
                                        Terms
                                    </Link>
                                </li>
                                <li>
                                    <Link
                                        href='#'
                                        className='text-gray-300 hover:text-white'
                                    >
                                        Privacy
                                    </Link>
                                </li>
                                <li>
                                    <Link
                                        href='#'
                                        className='text-gray-300 hover:text-white'
                                    >
                                        Contact
                                    </Link>
                                </li>
                            </ul>
                        </div>
                        <div>
                            <h3 className='text-lg font-semibold mb-4'>
                                Contact
                            </h3>
                            <p className='text-gray-300'>
                                Help Line: 0304-1118427
                            </p>
                            <p className='text-gray-300'>
                                WhatsApp: +923310288867
                            </p>
                        </div>
                        <div>
                            <Link
                                href='/'
                                className='text-2xl font-bold text-emerald-400'
                            >
                                TicketWala
                            </Link>
                            <p className='text-gray-300 mt-2'>
                                TICKETS ANYTIME ANYWHERE!
                            </p>
                        </div>
                    </div>
                </div>
            </footer>

            {/* Checkout Modal */}
            {isModalOpen && (
                <div className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50'>
                    <Card className='bg-gray-800 border-gray-700 text-gray-200 w-full max-w-md'>
                        <CardHeader className='flex justify-between items-center'>
                            <CardTitle>
                                {paymentSuccess
                                    ? 'Payment Successful'
                                    : 'Checkout'}
                            </CardTitle>
                            <Button variant='ghost' onClick={resetForm}>
                                <X className='h-6 w-6' />
                            </Button>
                        </CardHeader>
                        <CardContent>
                            {paymentSuccess ? (
                                <div className='space-y-4'>
                                    <div className='flex items-center justify-center'>
                                        <CheckCircle className='text-emerald-500 w-16 h-16' />
                                    </div>
                                    <h3 className='text-xl font-semibold text-center'>
                                        Thank you for your purchase!
                                    </h3>
                                    <div className='space-y-2'>
                                        <p>
                                            <strong>Transaction ID:</strong>{' '}
                                            {transactionDetails.txnNo}
                                        </p>
                                        <p>
                                            <strong>Amount Paid:</strong> Rs{' '}
                                            {ticketCount * ticketPrice}
                                        </p>
                                        <p>
                                            <strong>Payment Method:</strong>{' '}
                                            {paymentMethod === 'jazzcash'
                                                ? 'JazzCash'
                                                : 'EasyPaisa'}
                                        </p>
                                        <p>
                                            <strong>Tickets:</strong>{' '}
                                            {ticketCount}
                                        </p>
                                        <p>
                                            <strong>Email:</strong>{' '}
                                            {formData.email}
                                        </p>
                                    </div>
                                    <p className='text-sm text-gray-400'>
                                        Your tickets and receipt have been sent
                                        to your email. Please check your inbox
                                        (and spam folder) for details.
                                    </p>
                                    <Button
                                        className='w-full bg-emerald-500 hover:bg-emerald-600'
                                        onClick={resetForm}
                                    >
                                        Close
                                    </Button>
                                </div>
                            ) : paymentError ? ( // Added paymentError check
                                <div className='space-y-4'>
                                    <div className='flex items-center justify-center'>
                                        <X className='text-red-500 w-16 h-16' />
                                    </div>
                                    <h3 className='text-xl font-semibold text-center'>
                                        Payment Failed
                                    </h3>
                                    <p className='text-center'>
                                        {paymentError}
                                    </p>
                                    <Button
                                        className='w-full bg-emerald-500 hover:bg-emerald-600'
                                        onClick={() => setPaymentError(null)}
                                    >
                                        Try Again
                                    </Button>
                                </div>
                            ) : (
                                <form
                                    onSubmit={handleSubmit}
                                    className='space-y-6'
                                >
                                    <div className='space-y-2'>
                                        <Label htmlFor='paymentMethod'>
                                            Select Payment Method
                                        </Label>
                                        <RadioGroup
                                            defaultValue='jazzcash'
                                            onValueChange={setPaymentMethod}
                                            className='grid grid-cols-2 gap-4'
                                        >
                                            <div>
                                                <RadioGroupItem
                                                    value='jazzcash'
                                                    id='jazzcash'
                                                    className='peer sr-only'
                                                />
                                                <Label
                                                    htmlFor='jazzcash'
                                                    className='flex flex-col items-center justify-between rounded-md border-2 border-gray-700 bg-gray-800 p-4 hover:bg-gray-700 hover:text-white peer-data-[state=checked]:border-emerald-500 [&:has([data-state=checked])]:border-emerald-500'
                                                >
                                                    <img
                                                        src='/jazzcash-logo.png'
                                                        alt='JazzCash'
                                                        className='h-12 mb-2'
                                                    />
                                                    JazzCash
                                                </Label>
                                            </div>
                                            <div>
                                                <RadioGroupItem
                                                    value='easypaisa'
                                                    id='easypaisa'
                                                    className='peer sr-only'
                                                />
                                                <Label
                                                    htmlFor='easypaisa'
                                                    className='flex flex-col items-center justify-between rounded-md border-2 border-gray-700 bg-gray-800 p-4 hover:bg-gray-700 hover:text-white peer-data-[state=checked]:border-emerald-500 [&:has([data-state=checked])]:border-emerald-500'
                                                >
                                                    <img
                                                        src='/easypaisa-logo.png'
                                                        alt='EasyPaisa'
                                                        className='h-12 mb-2'
                                                    />
                                                    EasyPaisa
                                                </Label>
                                            </div>
                                        </RadioGroup>
                                    </div>

                                    <div className='space-y-2'>
                                        <Label htmlFor='name'>Full Name</Label>
                                        <Input
                                            id='name'
                                            required
                                            className='bg-gray-700 border-gray-600'
                                            value={formData.name}
                                            onChange={handleInputChange}
                                        />
                                    </div>

                                    <div className='space-y-2'>
                                        <Label htmlFor='email'>Email</Label>
                                        <Input
                                            id='email'
                                            type='email'
                                            required
                                            className='bg-gray-700 border-gray-600'
                                            value={formData.email}
                                            onChange={handleInputChange}
                                        />
                                    </div>

                                    <div className='space-y-2'>
                                        <Label htmlFor='phone'>
                                            Phone Number
                                        </Label>
                                        <Input
                                            id='phone'
                                            type='tel'
                                            required
                                            className='bg-gray-700 border-gray-600'
                                            value={formData.phone}
                                            onChange={handleInputChange}
                                        />
                                    </div>

                                    <p className='text-sm text-gray-400'>
                                        Please use the phone number registered
                                        with your{' '}
                                        {paymentMethod === 'jazzcash'
                                            ? 'JazzCash'
                                            : 'EasyPaisa'}{' '}
                                        account.
                                    </p>

                                    <Button
                                        type='submit'
                                        className='w-full bg-emerald-500 hover:bg-emerald-600'
                                        disabled={isProcessing}
                                    >
                                        {isProcessing
                                            ? 'Processing...'
                                            : 'Place Order'}
                                    </Button>
                                </form>
                            )}
                        </CardContent>
                    </Card>
                </div>
            )}
            <Toaster />
        </div>
    );
}

// File: components/ui/button.jsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 dark:focus-visible:ring-slate-300",
  {
    variants: {
      variant: {
        default:
          "bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/90",
        destructive:
          "bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/90",
        outline:
          "border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900 dark:border-slate-800 dark:bg-slate-950 dark:hover:bg-slate-800 dark:hover:text-slate-50",
        secondary:
          "bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80",
        ghost: "hover:bg-slate-100 hover:text-slate-900 dark:hover:bg-slate-800 dark:hover:text-slate-50",
        link: "text-slate-900 underline-offset-4 hover:underline dark:text-slate-50",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }

// File: components/ui/card.jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border border-slate-200 bg-white text-slate-950 shadow dark:border-slate-800 dark:bg-slate-950 dark:text-slate-50",
      className
    )}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-slate-500 dark:text-slate-400", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

// File: components/ui/input.jsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-9 w-full rounded-md border border-slate-200 bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-slate-950 placeholder:text-slate-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm dark:border-slate-800 dark:file:text-slate-50 dark:placeholder:text-slate-400 dark:focus-visible:ring-slate-300",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }

// File: components/ui/label.jsx
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

// File: components/ui/radio-group.jsx
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (<RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />);
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    (<RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-slate-200 border-slate-900 text-slate-900 shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:cursor-not-allowed disabled:opacity-50 dark:border-slate-800 dark:border-slate-50 dark:text-slate-50 dark:focus-visible:ring-slate-300",
        className
      )}
      {...props}>
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-3.5 w-3.5 fill-primary" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>)
  );
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

// File: components/ui/sonner.jsx
"use client";
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

const Toaster = ({
  ...props
}) => {
  const { theme = "system" } = useTheme()

  return (
    (<Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-white group-[.toaster]:text-neutral-950 group-[.toaster]:border-neutral-200 group-[.toaster]:shadow-lg dark:group-[.toaster]:bg-neutral-950 dark:group-[.toaster]:text-neutral-50 dark:group-[.toaster]:border-neutral-800",
          description: "group-[.toast]:text-neutral-500 dark:group-[.toast]:text-neutral-400",
          actionButton:
            "group-[.toast]:bg-neutral-900 group-[.toast]:text-neutral-50 dark:group-[.toast]:bg-neutral-50 dark:group-[.toast]:text-neutral-900",
          cancelButton:
            "group-[.toast]:bg-neutral-100 group-[.toast]:text-neutral-500 dark:group-[.toast]:bg-neutral-800 dark:group-[.toast]:text-neutral-400",
        },
      }}
      {...props} />)
  );
}

export { Toaster }

// File: components/ui/toast.jsx
"use client";
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props} />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border border-slate-200 p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full dark:border-slate-800",
  {
    variants: {
      variant: {
        default: "border bg-white text-slate-950 dark:bg-slate-950 dark:text-slate-50",
        destructive:
          "destructive group border-red-500 bg-red-500 text-slate-50 dark:border-red-900 dark:bg-red-900 dark:text-slate-50",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef(({ className, variant, ...props }, ref) => {
  return (
    (<ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props} />)
  );
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border border-slate-200 bg-transparent px-3 text-sm font-medium transition-colors hover:bg-slate-100 focus:outline-none focus:ring-1 focus:ring-slate-950 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-slate-100/40 group-[.destructive]:hover:border-red-500/30 group-[.destructive]:hover:bg-red-500 group-[.destructive]:hover:text-slate-50 group-[.destructive]:focus:ring-red-500 dark:border-slate-800 dark:hover:bg-slate-800 dark:focus:ring-slate-300 dark:group-[.destructive]:border-slate-800/40 dark:group-[.destructive]:hover:border-red-900/30 dark:group-[.destructive]:hover:bg-red-900 dark:group-[.destructive]:hover:text-slate-50 dark:group-[.destructive]:focus:ring-red-900",
      className
    )}
    {...props} />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-slate-950/50 opacity-0 transition-opacity hover:text-slate-950 focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600 dark:text-slate-50/50 dark:hover:text-slate-50",
      className
    )}
    toast-close=""
    {...props}>
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props} />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef(({ className, ...props }, ref) => (
  <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

export { ToastProvider, ToastViewport, Toast, ToastTitle, ToastDescription, ToastClose, ToastAction };

// File: components/ui/toaster.jsx
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    (<ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          (<Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>)
        );
      })}
      <ToastViewport />
    </ToastProvider>)
  );
}

// File: config/databse.js
import mongoose from 'mongoose';

let connected = false;

const connectDB = async () => {
    mongoose.set('strictQuery', true);

    // If the database is already connected, don't connect again
    if (connected) {
        console.log('MongoDB is already connected...');
        return;
    }

    // Connect to MongoDB
    try {
        await mongoose.connect(process.env.MONGODB_URI);
        connected = true;
        console.log('MongoDB connected...');
    } catch (error) {
        console.log(error);
    }
};

export default connectDB;

// File: lib/utils.js
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}

// File: models/User.js
import { Schema, model, models } from 'mongoose';

const UserSchema = new Schema(
    {
        email: {
            type: String,
        },
        fullName: {
            type: String,
        },
        phoneNumber: {
            type: String,
        },
    },
    {
        timestamps: true,
    }
);

const User = models.User || model('User', UserSchema);

export default User;

